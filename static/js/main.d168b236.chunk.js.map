{"version":3,"sources":["Link/index.js","Header/index.js","ButtonGroup/index.js","Page/index.js","Buy/index.js","Buy/Buy2.js","Buy/Buy3.js","App.js","serviceWorker.js","index.js"],"names":["Link","_ref","to","className","children","react_default","a","createElement","es_Link","onClick","event","window","gtag","gaPageView","Header","src_Link","ButtonGroup","Page","title","Fragment","src_Header","src_ButtonGroup","Buy","Buy2","type","placeholder","Buy3","Main","src_Page","About","Thing","Thing2","App","BrowserRouter","basename","Switch","Route","path","component","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d168b236.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Link as RouterLink } from \"react-router-dom\";\n\nconst gaPageView = (to) => {\n  // window.dataLayer.push(['set', 'page', to]); \n  window.gtag('set', 'page', to);\n  window.gtag('send', 'pageview');\n\n  // window.dataLayer.push({\n  //   'event':'VirtualPageview',\n  //   'virtualPageURL': to,\n  //   });\n}\n\nconst Link = ({\n  to,\n  className,\n  children\n}) => (\n  <RouterLink className={className} to={to} onClick={(event) => gaPageView(to)}>{children}</RouterLink> );\n\nexport default Link;\n\n","import React from 'react';\nimport Link from '../Link';\n\nimport './Header.css';\n\nconst Header = () => (\n  <Link to=\"/\">\n    <header className=\"header\"></header>\n  </Link>\n);\n\nexport default Header;\n","import React from 'react';\nimport Link from '../Link';\nimport './ButtonGroup.css';\n\nconst ButtonGroup = () => (\n  <div className=\"button-group\">\n    <Link className=\"btn\" to=\"/about\">About me</Link>\n    <Link className=\"btn\" to=\"/thing\">Things</Link>\n    <Link className=\"btn\" to=\"/thing-2\">More things</Link>\n    <Link className=\"btn\" to=\"/buy\">Buy</Link>\n  </div>\n);\n\nexport default ButtonGroup;","import React from 'react';\n\nimport Header from '../Header';\nimport ButtonGroup from '../ButtonGroup';\n\nconst Page = ({title}) => (\n  <>\n    <Header />\n    <div className=\"content\">\n      { title ? title : '' }\n      <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Neque sodales ut etiam sit. Risus quis varius quam quisque id diam vel. Metus vulputate eu scelerisque felis imperdiet proin fermentum. Nam at lectus urna duis convallis convallis tellus id. Lacus luctus accumsan tortor posuere ac ut consequat semper. Enim nulla aliquet porttitor lacus luctus accumsan. Urna id volutpat lacus laoreet non curabitur gravida arcu ac. Diam ut venenatis tellus in. Nisl pretium fusce id velit ut tortor pretium viverra. Volutpat est velit egestas dui id ornare. At lectus urna duis convallis convallis tellus id interdum velit. Tellus orci ac auctor augue mauris augue neque. Ullamcorper morbi tincidunt ornare massa eget egestas purus viverra accumsan. Risus pretium quam vulputate dignissim suspendisse in. Vitae auctor eu augue ut lectus arcu. Suspendisse potenti nullam ac tortor vitae purus faucibus ornare suspendisse. Vel pharetra vel turpis nunc eget lorem. Sociis natoque penatibus et magnis dis parturient montes nascetur. Dui faucibus in ornare quam viverra orci sagittis eu.</p>\n      <ButtonGroup />\n    </div>\n  </>\n);\n\nexport default Page;","import React from 'react';\nimport Link from '../Link';\nimport Header from '../Header';\nimport ButtonGroup from '../ButtonGroup';\n\nconst Buy = () => (\n  <>\n    <Header/>\n    <p>\n      Please buy my product\n    </p>\n    <Link to=\"/buy-2\">Checkout</Link>\n    <ButtonGroup/>\n  </>\n);\n\nexport default Buy;\n","import React from 'react';\nimport Link from '../Link';\nimport Header from '../Header';\nimport ButtonGroup from '../ButtonGroup';\n\nconst Buy2 = () => (\n  <>\n    <Header/>\n    <p>\n      Almost there\n    </p>\n    <input type=\"text\" placeholder=\"Payment details\"/>\n    <Link to=\"/buy-3\">Pay</Link>\n    <ButtonGroup/>\n  </>\n);\n\nexport default Buy2;\n","import React from 'react';\nimport Header from '../Header';\nimport ButtonGroup from '../ButtonGroup';\n\nconst Buy3 = () => (\n  <>\n    <Header/>\n    <h2>Success! Thanks for your purchase</h2>\n    <ButtonGroup/>\n  </>\n);\n\nexport default Buy3;\n\n","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\nimport './App.css';\nimport Page from './Page';\nimport Buy from './Buy';\nimport Buy2 from './Buy/Buy2';\nimport Buy3 from './Buy/Buy3';\n\nconst Main = () => <Page />;\nconst About = () => <Page title=\"About me\" />;\nconst Thing = () => <Page title=\"Thing\" />;\nconst Thing2 = () => <Page title=\"Thing2\" />;\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter basename={'/ga-learning-experiment'}>\n        <Switch>\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/thing\" component={Thing} />\n          <Route path=\"/thing-2\" component={Thing2} />\n          <Route path=\"/buy\" component={Buy} />\n          <Route path=\"/buy-2\" component={Buy2} />\n          <Route path=\"/buy-3\" component={Buy3} />\n          <Route path=\"/\" component={Main} />\n        </Switch>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}